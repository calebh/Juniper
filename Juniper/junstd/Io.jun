module Io
include("<Arduino.h>")

/*
    Interface: Io
*/

/*
    Type: pinState

    | pinState

    Constructors:
        - <high> ()
        - <low> ()
*/
/*
    Function: high

    Type Signature:
    
        | () -> pinState
*/
/*
    Function: low

    Type Signature:
    
        | () -> pinState
*/
type pinState = high() | low()

/*
    Type: mode

    | mode

    Constructors:
        - <input> ()
        - <output> ()
        - <inputPullup> ()
*/
/*
    Function: input

    Type Signature:
    
        | () -> mode
*/
/*
    Function: output

    Type Signature:
    
        | () -> mode
*/
/*
    Function: inputPullup

    Type Signature:
    
        | () -> mode
*/
type mode = input() | output() | inputPullup()

/*
    Function: toggle

    Given a high value, returns a low value. Given a low value, returns a high
    value.

    Type Signature:
    
        | (pinState) -> pinState

    Parameters:
        p : pinState - The <pinState> which you would like to find the opposite
        value of.

    Returns:
        The opposite <pinState>.
*/
fun toggle(p : pinState) : pinState =
    match p {
        high() => low()
        low() => high()
    }

/*
    Function: printString

    Writes a string to the serial output.

    Type Signature:
    
        | (string) -> unit

    Parameters:
        str : string - The string to write

    Returns:
        unit
*/
fun printStr(str : string) : unit =
    #Serial.print(str);#

/*
    Function: printCharList

    Writes a character list to the serial output.

    Type Signature:
    
        | (list<uint8,n>) -> unit

    Parameters:
        cl : list<uint8,n> - The character list to print

    Returns:
        unit
*/
fun printCharList(cl : list<uint8, n>) : unit =
    #Serial.print((char *) &cl.data[0]);#

/*
    Function: printFloat

    Writes a float to the serial output.

    Type Signature:
    
        | (float) -> unit

    Parameters:
        f : float - The number to write

    Returns:
        unit
*/
fun printFloat(f : float) : unit =
    #Serial.print(f);#

/*
    Function: printInt

    Writes an integer to the serial output.

    Type Signature:
    
        | (int32) -> unit

    Parameters:
        n : int32 - The number to write

    Returns:
        unit
*/
fun printInt(n : int32) : unit =
    #Serial.print(n);#

/*
    Type: base

    | base

    Constructors:
        - <binary> ()
        - <octal> ()
        - <decimal> ()
        - <hexadecimal> ()
*/
/*
    Function: binary

    Type Signature:
    
        | () -> base
*/
/*
    Function: octal

    Type Signature:
    
        | () -> base
*/
/*
    Function: decimal

    Type Signature:
    
        | () -> base
*/
/*
    Function: hexadecimal

    Type Signature:
    
        | () -> base
*/
type base = binary() | octal() | decimal() | hexadecimal()

/*
    Function: baseToInt

    Converts a base to the numerical integer base it represents.

    Type Signature:
    
        | (base) -> t where t : int

    Parameters:
        b : base - The base value

    Returns 2 in the case of binary, 8 for octal, 10 for decimal and 16 for hexadecimal
*/
fun baseToInt(b) =
    match b {
        binary() => 2
        octal() => 8
        decimal() => 10
        hexadecimal() => 16
    }

/*
    Function: printIntBase

    Writes an integer in the given base to the serial output.

    Type Signature:
    
        | (int32, base) -> unit

    Parameters:
        n : int32 - The number to write
        b : base - The base to use

    Returns:
        unit
*/
fun printIntBase(n : int32, b : base) : unit = {
    let bint : int32 = baseToInt(b)
    #Serial.print(n, bint);#
}

/*
    Function: printFloatPlaces

    Writes a float with the given number of decimal places to the serial output.

    Type Signature:
    
        | (float, int32) -> unit

    Parameters:
        f : float - The number to write
        numPlaces : int32 - The number of decimal places to use

    Returns:
        unit
*/
fun printFloatPlaces(f : float, numPlaces : int32) : unit =
    #Serial.print(f, numPlaces);#

/*
    Function: beginSerial

    Sets up serial ouput

    Type Signature:
    
        | (uint32) -> unit

    Parameters:
        speed : uint32 - Sets the data rate in bits per second (baud) for serial
            data transmission.

    Returns:
        Unit

    See also:
        https://www.arduino.cc/en/Serial/Begin
*/
fun beginSerial(speed : uint32) : unit =
    #Serial.begin(speed);#

/*
    Function: pinStateToInt

    Converts a <pinState> to an integer representation.

    Type Signature:
    
        | (pinState) -> uint8

    Parameters:
        value : pinState - The pinState to Converts

    Returns:
        0 for <low> and 1 for <high>
*/
fun pinStateToInt(value : pinState) : uint8 =
    match value {
        low() => 0u8
        high() => 1u8
    }

/*
    Function: intToPinState

    Converts an integer to a <pinState> representation.

    Type Signature:
    
        | (uint8) -> pinState

    Parameters:
        value : uint8 - The integer value to convert

    Returns:
        <low> for 0 && <high> for anything else
*/
fun intToPinState(value : uint8) : pinState =
    if value == 0u8 
        low()
    else
        high()

/*
    Function: digWrite

    Writes a value directly to a pin.

    Type Signature:
    
        | (uint16, pinState) -> unit

    Parameters:
        pin : uint16 - The pin to write to.
        value : pinState - The state the pin should be in.

    Returns:
        Unit

    See also:
        <digOut>
*/
fun digWrite(pin : uint16, value : pinState) : unit = {
    let intVal = pinStateToInt(value)
    #digitalWrite(pin, intVal);#
}

/*
    Function: digRead

    Reads a value direction from a pin.

    Type Signature:
    
        | (uint16) -> pinState

    Parameters:
        pin : uint16 - The pin to read from.

    Returns:
        The value of the pin.

    See also:
        <digIn>
*/
fun digRead(pin : uint16) : pinState = {
    var intVal : uint8
    #intVal = digitalRead(pin);#
    intToPinState(intVal)
}

/*
    Function: digIn

    Creates an input signal given some pin identifier.

    Type Signature:
    
        | (uint16) -> sig<pinState>

    Parameters:
        pin : uint16 - The pin to read from

    Returns:
        A signal holding the state of the pin.

    See also:
        <digRead>
*/
fun digIn(pin : uint16) : sig<pinState> =
    signal(just(digRead(pin)))

/*
    Function: digOut

    Takes in an input signal && writes the value contained in the signal to the
    given pin.

    Type Signature:
    
        | (uint16, sig<pinState>) -> unit

    Parameters:
        pin : uint16 - The pin to write to
        sig : sig<pinState> - The signal to output to the pin

    Returns:
        Unit

    See also:
        <digWrite>
*/
fun digOut(pin : uint16, sig : sig<pinState>) : unit =
    Signal:sink((value : pinState) : unit => digWrite(pin, value), sig)

/*
    Function: anaRead

    Reads a value directly from an analog pin.

    Type Signature:
    
        | (uint16) -> uint16

    Parameters:
        pin : uint16 - The pin to read from

    Returns:
        A value ranging from 0 to 1023.

    See also:
        <anaIn>
        https://www.arduino.cc/en/Reference/AnalogRead
*/
fun anaRead(pin : uint16) : uint16 = {
    var value : uint16
    #value = analogRead(pin);#
    value
}

/*
    Function: anaWrite

    Writes an analog (PWM) value directly to an analog pin.

    Type Signature:
    
        | (uint16, uint8) -> unit

    Parameters:
        pin : uint16 - The pin to write to
        value: uint8 - The analog value to write to the pin. This number ranges
        from 0 (always off) to 255 (always on)

    See also:
        <anaOut>
        https://www.arduino.cc/en/Reference/AnalogWrite
*/
fun anaWrite(pin : uint16, value : uint8) : unit =
    #analogWrite(pin, value);#

/*
    Function: anaIn

    Creates an analog input signal given some pin identifier.

    Type Signature:
    
        | (uint16) -> sig<uint16>

    Parameters:
        pin : uint16 - The pin to read from

    See also:
        <anaRead>
*/
fun anaIn(pin : uint16) : sig<uint16> =
    signal(just(anaRead(pin)))

/*
    Function: anaOut

    Takes in an analog input signal and writes the value contained in the signal
    to the given analog pin.

    Type Signature:
    
        | (uint16, sig<uint8>) -> unit

    Parameters:
        pin : uint16 - The pin to write to
        sig : sig<uint8> - The analog signal to output to a pin

    Returns:
        Unit
*/
fun anaOut(pin : uint16, sig : sig<uint8>) : unit =
    Signal:sink((value : uint8) : unit => anaWrite(pin, value), sig)


/*
    Function: pinModeToInt

    Converts a pinMode to an integer representation.

    Type Signature:
    
        | (mode) -> uint8

    Parameters:
        m : mode - The mode to convert

    Returns:
        0 for <input>, 1 for <output> and 2 for <inputPullup>
*/
fun pinModeToInt(m : mode) : uint8 =
    match m {
        input() => 0u8
        output() => 1u8
        inputPullup() => 2u8
    }

/*
    Function: intToPinMode

    Converts an integer representation to a pinMode

    Type Signature:
    
        | (uint8) -> mode

    Parameters:
    | m : uint8 - The mode to convert

    Returns:
        <input> for 0, <output> for 1 and <inputPullup> for 2
*/
fun intToPinMode(m : uint8) : mode =
    match m {
        0 => input()
        1 => output()
        2 => inputPullup()
    }

/*
    Function: setPinMode

    Sets the <mode> of a specified pin

    Type Signature:
    
        | (uint16, mode) -> unit

    Returns:
        Unit
*/
fun setPinMode(pin : uint16, m : mode) : unit = {
    let m2 = pinModeToInt(m)
    #pinMode(pin, m2);#
}

/*
    Function: risingEdge

    Takes in a signal and a previous state and outputs a new signal that fires
    when the input signal transitions from <low> to <high>.

    Type Signature:
    
        | (inout pinState, sig<pinState>) -> sig<unit>

    Parameters:
        prevState : inout pinState - Holds the previous state of the signal
        sig : sig<pinState> - The digital input signal

    Returns:
        A signal of type unit. The signal fires unit on a rising edge, otherwise
        it does not fire.
*/
fun risingEdge(inout prevState : pinState, sig : sig<pinState>) : sig<unit> =
    match sig {
        signal(just(currState)) => {
            let ret =
                match (currState, prevState) {
                    (high(), low()) =>
                        just(())
                    _ =>
                        nothing()
                }
            prevState = currState
            signal(ret)
        }
        _ =>
            signal(nothing())
    }

/*
    Function: fallingEdge

    Takes in a signal and a previous state and outputs a new signal that fires
    when the input signal transitions from <high> to <low>.

    Type Signature:
    
        | (inout pinState, sig<pinState>) -> sig<unit>

    Parameters:
        prevState : inout pinState - Holds the previous state of the signal
        sig : sig<pinState> - The digital input signal

    Returns:
        A signal of type unit. The signal fires unit on a falling edge,
        otherwise it does not fire.
*/
fun fallingEdge(inout prevState : pinState, sig : sig<pinState>) : sig<unit> =
    match sig {
        signal(just(currState)) => {
            let ret =
                match (currState, prevState) {
                    (low(), high()) =>
                        just(())
                    _ =>
                        nothing()
                }
            prevState = currState
            signal(ret)
        }
        _ =>
            signal(nothing())
    }

/*
    Function: edge

    Takes in a signal and a previous state and outputs a new signal that fires
    when the input transitions from <high> to <low> or <low> to <high>

    Type Signature:
    
        | (inout pinState, sig<pinState>) -> sig<pinState>

    Parameters:
        prevState : inout pinState - Holds the previous state of the signal
        sig : sig<pinState> - The digital input signal

    Returns:
        A signal that outputs <high> on a rising edge and <low> on a falling
        edge.
*/
fun edge(inout prevState : pinState, sig : sig<pinState>) : sig<unit> =
    match sig {
        signal(just(currState)) => {
            let ret =
                match (currState, prevState) {
                    (low(), high()) =>
                        just(())
                    (high(), low()) =>
                        just(())
                    _ =>
                        nothing()
                }
            prevState = currState
            signal(ret)
        }
        _ =>
            signal(nothing())
    }
